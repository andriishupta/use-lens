
  query GetChallenge($request: ChallengeRequest!) {
    challenge(request: $request) { text }
  }


  mutation Authentication($request: SignedAuthChallenge!) { 
    authenticate(request: $request) {
      accessToken
      refreshToken
    }
 }


  mutation RefreshAuthentication($request: RefreshRequest!) { 
    refresh(request: $request) {
      accessToken
      refreshToken
    }
 }


  query Verify($request: VerifyRequest!) {
    verify(request: $request)
  }


  mutation ClaimHandle($request: ClaimHandleRequest!) { 
    claim(request: $request) {
      ... on RelayerResult {
        txHash
      }
      ... on RelayError {
        reason
      }
      __typename
    }
 }


  query ClaimableHandles {
    claimableHandles {
      reservedHandles {
        id
        handle
        source
        expiry
      }
    }
  }

  mutation CreateSetDispatcherTypedData($request: SetDispatcherRequest!) { 
    createSetDispatcherTypedData(request: $request) {
      id
      expiresAt
      typedData {
        types {
          SetDispatcherWithSig {
            name
            type
          }
        }
        domain {
          name
          chainId
          version
          verifyingContract
        }
        value {
          nonce
          deadline
          profileId
          dispatcher
        }
      }
    }
 }


  query ExploreProfiles($request: ExploreProfilesRequest!) {
    exploreProfiles(request: $request) {
      items {
        id
        name
        bio
        isDefault
        attributes {
          displayType
          traitType
          key
          value
        }
        followNftAddress
        metadata
        handle
        picture {
          ... on NftImage {
            contractAddress
            tokenId
            uri
            chainId
            verified
          }
          ... on MediaSet {
            original {
              url
              mimeType
            }
          }
        }
        coverPicture {
          ... on NftImage {
            contractAddress
            tokenId
            uri
            chainId
            verified
          }
          ... on MediaSet {
            original {
              url
              mimeType
            }
          }
        }
        ownedBy
        dispatcher {
          address
          canUseRelay
        }
        stats {
          totalFollowers
          totalFollowing
          totalPosts
          totalComments
          totalMirrors
          totalPublications
          totalCollects
        }
        followModule {
          ... on FeeFollowModuleSettings {
            type
            contractAddress
            amount {
              asset {
                name
                symbol
                decimals
                address
              }
              value
            }
            recipient
          }
          ... on ProfileFollowModuleSettings {
          type
          }
          ... on RevertFollowModuleSettings {
          type
          }
        }
      }
      pageInfo {
        prev
        next
        totalCount
      }
    }
  }


  query ExplorePublications($request: ExplorePublicationRequest!) {
    explorePublications(request: $request) {
      items {
        __typename 
        ... on Post {
          ...PostFields
        }
        ... on Comment {
          ...CommentFields
        }
        ... on Mirror {
          ...MirrorFields
        }
      }
      pageInfo {
        prev
        next
        totalCount
      }
    }
  }

  fragment MediaFields on Media {
    url
    width
    height
    mimeType
  }

  fragment ProfileFields on Profile {
    id
    name
    bio
    attributes {
      displayType
      traitType
      key
      value
    }
    isFollowedByMe
    isFollowing(who: null)
    followNftAddress
    metadata
    isDefault
    handle
    picture {
      ... on NftImage {
        contractAddress
        tokenId
        uri
        verified
      }
      ... on MediaSet {
        original {
          ...MediaFields
        }
        small {
          ...MediaFields
        }
        medium {
          ...MediaFields
        }
      }
    }
    coverPicture {
      ... on NftImage {
        contractAddress
        tokenId
        uri
        verified
      }
      ... on MediaSet {
        original {
          ...MediaFields
        }
        small {
         ...MediaFields
        }
        medium {
          ...MediaFields
        }
      }
    }
    ownedBy
    dispatcher {
      address
    }
    stats {
      totalFollowers
      totalFollowing
      totalPosts
      totalComments
      totalMirrors
      totalPublications
      totalCollects
    }
    followModule {
      ... on FeeFollowModuleSettings {
        type
        amount {
          asset {
            name
            symbol
            decimals
            address
          }
          value
        }
        recipient
      }
      ... on ProfileFollowModuleSettings {
        type
      }
      ... on RevertFollowModuleSettings {
        type
      }
    }
  }

  fragment PublicationStatsFields on PublicationStats { 
    totalAmountOfMirrors
    totalAmountOfCollects
    totalAmountOfComments
  }

  fragment MetadataOutputFields on MetadataOutput {
    name
    description
    content
    media {
      original {
        ...MediaFields
      }
      small {
        ...MediaFields
      }
      medium {
        ...MediaFields
      }
    }
    attributes {
      displayType
      traitType
      value
    }
  }

  fragment Erc20Fields on Erc20 {
    name
    symbol
    decimals
    address
  }

  fragment CollectModuleFields on CollectModule {
    __typename
    ... on FreeCollectModuleSettings {
      type
      followerOnly
      contractAddress
    }
    ... on FeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedTimedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
    ... on RevertCollectModuleSettings {
      type
    }
    ... on TimedFeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
  }

  fragment PostFields on Post {
    id
    profile {
      ...ProfileFields
    }
    stats {
      ...PublicationStatsFields
    }
    metadata {
      ...MetadataOutputFields
    }
    createdAt
    collectModule {
      ...CollectModuleFields
    }
    referenceModule {
      ... on FollowOnlyReferenceModuleSettings {
        type
      }
    }
    appId
    hidden
    reaction(request: null)
    mirrors(by: null)
    hasCollectedByMe
  }

  fragment MirrorBaseFields on Mirror {
    id
    profile {
      ...ProfileFields
    }
    stats {
      ...PublicationStatsFields
    }
    metadata {
      ...MetadataOutputFields
    }
    createdAt
    collectModule {
      ...CollectModuleFields
    }
    referenceModule {
      ... on FollowOnlyReferenceModuleSettings {
        type
      }
    }
    appId
    hidden
    reaction(request: null)
    hasCollectedByMe
  }

  fragment MirrorFields on Mirror {
    ...MirrorBaseFields
    mirrorOf {
     ... on Post {
        ...PostFields          
     }
     ... on Comment {
        ...CommentFields          
     }
    }
  }

  fragment CommentBaseFields on Comment {
    id
    profile {
      ...ProfileFields
    }
    stats {
      ...PublicationStatsFields
    }
    metadata {
      ...MetadataOutputFields
    }
    createdAt
    collectModule {
      ...CollectModuleFields
    }
    referenceModule {
      ... on FollowOnlyReferenceModuleSettings {
        type
      }
    }
    appId
    hidden
    reaction(request: null)
    mirrors(by: null)
    hasCollectedByMe
  }

  fragment CommentFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
        ...MirrorBaseFields
        mirrorOf {
          ... on Post {
             ...PostFields          
          }
          ... on Comment {
             ...CommentMirrorOfFields        
          }
        }
      }
    }
  }

  fragment CommentMirrorOfFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
         ...MirrorBaseFields
      }
    }
  }


  query DoesFollow($request: DoesFollowRequest!) {
    doesFollow(request: $request) { 
			followerAddress
    	profileId
    	follows
		}
  }


  mutation CreateFollowTypedData($request: FollowRequest!) { 
    createFollowTypedData(request: $request) {
      id
      expiresAt
      typedData {
        domain {
          name
          chainId
          version
          verifyingContract
        }
        types {
          FollowWithSig {
            name
            type
          }
        }
        value {
          nonce
          deadline
          profileIds
          datas
        }
      }
    }
 }


  query GetFollowerNftTokenIds($request: FollowerNftOwnedTokenIdsRequest!) {
    followerNftOwnedTokenIds(request: $request) { 
        followerNftAddress
        tokensIds
	  }
  }


  query GetFollowers($request: FollowersRequest!) {
    followers(request: $request) { 
	   items {
        wallet {
          address
          defaultProfile {
            id
            name
            bio
            attributes {
              displayType
              traitType
              key
              value
            }
            followNftAddress
            metadata
            handle
            picture {
              ... on NftImage {
                contractAddress
                tokenId
                uri
                verified
              }
              ... on MediaSet {
                original {
                  url
                  mimeType
                }
              }
            }
            coverPicture {
              ... on NftImage {
                contractAddress
                tokenId
                uri
                verified
              }
              ... on MediaSet {
                original {
                  url
                  mimeType
                }
              }
            }
            ownedBy
            dispatcher {
              address
              canUseRelay
            }
            stats {
              totalFollowers
              totalFollowing
              totalPosts
              totalComments
              totalMirrors
              totalPublications
              totalCollects
            }
            followModule {
              ... on FeeFollowModuleSettings {
                type
                contractAddress
                amount {
                  asset {
                    name
                    symbol
                    decimals
                    address
                  }
                  value
                }
                recipient
              }
              ... on ProfileFollowModuleSettings {
                type
              }
              ... on RevertFollowModuleSettings {
                type
              }
            }
          }
        }
        totalAmountOfTimesFollowed
      }
      pageInfo {
        prev
        next
        totalCount
      }
    }
  }


  query GetFollowing($request: FollowingRequest!) {
    following(request: $request) { 
			    items {
            profile {
              id
              name
              bio
              attributes {
                displayType
                traitType
                key
                value
              }
              followNftAddress
              metadata
              isDefault
              handle
              picture {
                ... on NftImage {
                  contractAddress
                  tokenId
                  uri
                  verified
                }
                ... on MediaSet {
                  original {
                    url
                    width
                    height
                    mimeType
                  }
                  medium {
                    url
                    width
                    height
                    mimeType
                  }
                  small {
                    url
                    width
                    height
                    mimeType
                  }
                }
              }
              coverPicture {
                ... on NftImage {
                  contractAddress
                  tokenId
                  uri
                  verified
                }
                ... on MediaSet {
                  original {
                    url
                    width
                    height
                    mimeType
                  }
                  small {
                    width
                    url
                    height
                    mimeType
                  }
                  medium {
                    url
                    width
                    height
                    mimeType
                  }
                }
              }
              ownedBy
              dispatcher {
                address
                canUseRelay
              }
              stats {
                totalFollowers
                totalFollowing
                totalPosts
                totalComments
                totalMirrors
                totalPublications
                totalCollects
              }
              followModule {
                ... on FeeFollowModuleSettings {
                  type
                  amount {
                    asset {
                      name
                      symbol
                      decimals
                      address
                    }
                    value
                  }
                  recipient
                }
                ... on ProfileFollowModuleSettings {
                  type
                }
                ... on RevertFollowModuleSettings {
                  type
                }
            }
          }
          totalAmountOfTimesFollowing
        }
       pageInfo {
          prev
          next
          totalCount
       }
		}
  }


  query GetPendingApprovalFollows($request: PendingApprovalFollowsRequest!) {
    pendingApprovalFollows(request: $request) { 
			    items {
            id
            name
            bio
            attributes {
              displayType
              traitType
              key
              value
            }
            followNftAddress
            metadata
            isDefault
            handle
            picture {
              ... on NftImage {
                contractAddress
                tokenId
                uri
                verified
              }
              ... on MediaSet {
                original {
                  url
                  width
                  height
                  mimeType
                }
                medium {
                  url
                  width
                  height
                  mimeType
                }
                small {
                  url
                  width
                  height
                  mimeType
                }
              }
            }
            coverPicture {
              ... on NftImage {
                contractAddress
                tokenId
                uri
                verified
              }
              ... on MediaSet {
                original {
                  url
                  width
                  height
                  mimeType
                }
                small {
                  width
                  url
                  height
                  mimeType
                }
                medium {
                  url
                  width
                  height
                  mimeType
                }
              }
            }
            ownedBy
            dispatcher {
              address
              canUseRelay
            }
            stats {
              totalFollowers
              totalFollowing
              totalPosts
              totalComments
              totalMirrors
              totalPublications
              totalCollects
            }
            followModule {
              ... on FeeFollowModuleSettings {
                type
                amount {
                  asset {
                    name
                    symbol
                    decimals
                    address
                  }
                  value
                }
                recipient
              }
              ... on ProfileFollowModuleSettings {
                type
              }
              ... on RevertFollowModuleSettings {
                type
              }
            }
          }
       pageInfo {
          prev
          next
          totalCount
       }
		}
  }


  mutation CreateSetFollowModuleTypedData($request: CreateSetFollowModuleRequest!) { 
    createSetFollowModuleTypedData(request: $request) {
      id
      expiresAt
      typedData {
        types {
          SetFollowModuleWithSig {
            name
            type
          }
        }
      domain {
        name
        chainId
        version
        verifyingContract
      }
      value {
        nonce
        deadline
        profileId
        followModule
        followModuleInitData
      }
     }
   }
 }


  mutation CreateSetFollowNftUriTypedData($request: CreateSetFollowNFTUriRequest!) { 
    createSetFollowNFTUriTypedData(request: $request) {
      id
      expiresAt
      typedData {
        types {
          SetFollowNFTURIWithSig {
            name
            type
          }
        }
      domain {
        name
        chainId
        version
        verifyingContract
      }
      value {
        nonce
        profileId
        deadline
        followNFTURI
      }
     }
   }
 }


  mutation CreateToggleFollowTypedData($request: CreateToggleFollowRequest!) { 
    createToggleFollowTypedData(request: $request) {
      id
      expiresAt
      typedData {
        domain {
          name
          chainId
          version
          verifyingContract
        }
        types {
          ToggleFollowWithSig {
            name
            type
          }
        }
        value {
          nonce
          deadline
          profileIds
          enables
        }
      }
    }
 }


  mutation CreateUnfollowTypedData($request: UnfollowRequest!) { 
    createUnfollowTypedData(request: $request) {
      id
      expiresAt
      typedData {
        domain {
          name
          chainId
          version
          verifyingContract
        }
        types {
          BurnWithSig {
            name
            type
          }
        }
        value {
          nonce
          deadline
          tokenId
        }
      }
    }
 }


  query GetPing {
    ping
  }


  query HasTxBeenIndexed($request: HasTxHashBeenIndexedRequest!) {
    hasTxHashBeenIndexed(request: $request) { 
	    ... on TransactionIndexedResult {
            indexed
            txReceipt {
                to
                from
                contractAddress
                transactionIndex
                root
                gasUsed
                logsBloom
                blockHash
                transactionHash
                blockNumber
                confirmations
                cumulativeGasUsed
                effectiveGasPrice
                byzantium
                type
                status
                logs {
                    blockNumber
                    blockHash
                    transactionIndex
                    removed
                    address
                    data
                    topics
                    transactionHash
                    logIndex
                }
            }
            metadataStatus {
              status
              reason
            }
        }
        ... on TransactionError {
            reason
            txReceipt {
                to
                from
                contractAddress
                transactionIndex
                root
                gasUsed
                logsBloom
                blockHash
                transactionHash
                blockNumber
                confirmations
                cumulativeGasUsed
                effectiveGasPrice
                byzantium
                type
                status
                logs {
                    blockNumber
                    blockHash
                    transactionIndex
                    removed
                    address
                    data
                    topics
                    transactionHash
                    logIndex
             }
            }
        },
        __typename
    }
  }


  query ModuleApprovalData($request: GenerateModuleCurrencyApprovalDataRequest!) {
    generateModuleCurrencyApprovalData(request: $request) {
      to
   	  from
      data
    }
  }


  query ApprovedModuleAllowanceAmount($request: ApprovedModuleAllowanceAmountRequest!) {
    approvedModuleAllowanceAmount(request: $request) {
      currency
      module
      contractAddress
      allowance
    }
  }


  mutation CreateCollectTypedData($request: CreateCollectRequest!) { 
    createCollectTypedData(request: $request) {
      id
      expiresAt
      typedData {
        types {
          CollectWithSig {
            name
            type
          }
        }
      domain {
        name
        chainId
        version
        verifyingContract
      }
      value {
        nonce
        deadline
        profileId
        pubId
        data
      }
     }
   }
 }


  query EnabledModules {
    enabledModules {
      collectModules {
        moduleName
        contractAddress
        inputParams {
          name
          type
        }
        redeemParams {
          name
          type
        }
        returnDataParms {
          name
          type
        }
      }
      followModules {
        moduleName
        contractAddress
        inputParams {
          name
          type
        }
        redeemParams {
          name
          type
        }
        returnDataParms {
          name
          type
        }
      }
      referenceModules {
        moduleName
        contractAddress
        inputParams {
          name
          type
        }
        redeemParams {
          name
          type
        }
        returnDataParms {
          name
          type
        }
      }
    }
	}


  query EnabledCurrencies {
    enabledModuleCurrencies {
      name
      symbol
      decimals
      address
    }
  }


  query GetUsersNfts($request: NFTsRequest!) {
    nfts(request: $request) {
      items {
        contractName
        contractAddress
        symbol
        tokenId
        owners {
          amount
          address
        }
        name
        description
        contentURI
        originalContent {
          uri
          metaType
        }
        chainId
        collectionName
        ercType
      }
    pageInfo {
      prev
      next
      totalCount
    }
  }
}


  query GetNotifications($request: NotificationRequest!) { 
    notifications(request: $request) {
      items {
        ... on NewFollowerNotification {
            ...NewFollowerNotificationFields
        }

        ... on NewMirrorNotification {
            ...NewMirrorNotificationFields
        }

        ... on NewCollectNotification {
            ...NewCollectNotificationFields
        }

        ... on NewCommentNotification {
            ...NewCommentNotificationFields
        }

        ... on NewMentionNotification {
          mentionPublication {
            ... on Post {
                ...CompactPost
              }
              ... on Comment {
                ...CompactComment
              }
          }
          createdAt
        }
      }
      pageInfo {
        ...CommonPaginatedResultInfo
      }
  }
}
 
 fragment CommentWithCommentedPublicationFields on Comment {
  ...CompactComment
  commentOn {
    ... on Post {
      ...CompactPost
    }
    ... on Mirror {
      ...CompactMirror
    }
    ... on Comment {
      ...CompactComment
    }
  }
}

fragment NewFollowerNotificationFields on NewFollowerNotification {
  __typename
  createdAt
  isFollowedByMe
  wallet {
    ...Wallet
  }
}

fragment NewCollectNotificationFields on NewCollectNotification {
  __typename
  createdAt
  wallet {
    ...Wallet
  }
  collectedPublication {
    __typename
    ... on Post {
      ...CompactPost
    }

    ... on Mirror {
      ...CompactMirror
    }

    ... on Comment {
      ...CompactComment
    }
  }
}

fragment NewMirrorNotificationFields on NewMirrorNotification {
  __typename
  createdAt
  profile {
    ...CompactProfile
  }
  publication {
    ... on Post {
      ...CompactPost
    }
    ... on Comment {
      ...CompactComment
    }
  }
}

fragment NewCommentNotificationFields on NewCommentNotification {
  __typename
  createdAt
  profile {
    ...CompactProfile
  }
  comment {
    ...CommentWithCommentedPublicationFields
  }
}

fragment CompactPublicationStats on PublicationStats {
  totalAmountOfMirrors
  totalAmountOfCollects
  totalAmountOfComments
}

fragment CompactMetadata on MetadataOutput {
  name
  description
  content
  media {
    ...ProfileMediaFields
  }
}

fragment CompactPost on Post {
  id
  stats {
    ...CompactPublicationStats
  }
  metadata {
    ...CompactMetadata
  }
  profile {
    ...CompactProfile
  }
  collectedBy {
    ...Wallet
  }
  createdAt
}

fragment CompactMirror on Mirror {
  id
  stats {
    ...CompactPublicationStats
  }
  metadata {
    ...CompactMetadata
  }
  profile {
    ...CompactProfile
  }
  createdAt
}

fragment CompactComment on Comment {
  id
  stats {
    ...CompactPublicationStats
  }
  metadata {
    ...CompactMetadata
  }
  profile {
    ...CompactProfile
  }
  collectedBy {
    ...Wallet
  }
  createdAt
}

fragment CommonPaginatedResultInfo on PaginatedResultInfo {
  prev
  next
  totalCount
}

#  FIXME: duplicate
#fragment MediaFields on Media {
#  url
#  width
#  height
#  mimeType
#}

fragment ProfileMediaFields on ProfileMedia {
  ... on NftImage {
    contractAddress
    tokenId
    uri
    verified
  }

  ... on MediaSet {
    original {
      ...MediaFields
    }

    small {
      ...MediaFields
    }

    medium {
      ...MediaFields
    }
  }
}

fragment Wallet on Wallet {
  address
  defaultProfile {
    ...CompactProfile
  }
}

fragment CompactProfile on Profile {
  id
  name
  bio
  attributes {
    displayType
    traitType
    key
    value
  }
  metadata
  isDefault
  handle
  picture {
    ... on NftImage {
      contractAddress
      tokenId
      uri
      verified
    }
    ... on MediaSet {
      original {
        ...MediaFields
      }
      small {
        ...MediaFields
      }
      medium {
        ...MediaFields
      }
    }
  }
  coverPicture {
    ... on NftImage {
      contractAddress
      tokenId
      uri
      verified
    }
    ... on MediaSet {
      original {
        ...MediaFields
      }
      small {
       ...MediaFields
      }
      medium {
        ...MediaFields
      }
    }
  }
  ownedBy
  dispatcher {
    address
  }
  stats {
    totalFollowers
    totalFollowing
    totalPosts
    totalComments
    totalMirrors
    totalPublications
    totalCollects
  }
  followModule {
    ... on FeeFollowModuleSettings {
      type
      amount {
        asset {
          name
          symbol
          decimals
          address
        }
        value
      }
      recipient
    }
    ... on ProfileFollowModuleSettings {
     type
    }
    ... on RevertFollowModuleSettings {
     type
    }
  }
}


  mutation CreateBurnProfileTypedData($request: BurnProfileRequest!) { 
    createBurnProfileTypedData(request: $request) {
      id
      expiresAt
      typedData {
        domain {
          name
          chainId
          version
          verifyingContract
        }
        types {
          BurnWithSig {
            name
            type
          }
        }
        value {
          nonce
        	deadline
        	tokenId
        }
      }
    }
 }


  query GetDefaultProfiles($request: DefaultProfileRequest!) {
    defaultProfile(request: $request) {
      id
      name
      bio
      attributes {
        displayType
        traitType
        key
        value
      }
      followNftAddress
      metadata
      isDefault
      picture {
        ... on NftImage {
          contractAddress
          tokenId
          uri
          verified
        }
        ... on MediaSet {
          original {
            url
            mimeType
          }
        }
        __typename
      }
      handle
      coverPicture {
        ... on NftImage {
          contractAddress
          tokenId
          uri
          verified
        }
        ... on MediaSet {
          original {
            url
            mimeType
          }
        }
        __typename
      }
      ownedBy
      dispatcher {
        address
        canUseRelay
      }
      stats {
        totalFollowers
        totalFollowing
        totalPosts
        totalComments
        totalMirrors
        totalPublications
        totalCollects
      }
      followModule {
        ... on FeeFollowModuleSettings {
          type
          amount {
            asset {
              symbol
              name
              decimals
              address
            }
            value
          }
          recipient
        }
        ... on ProfileFollowModuleSettings {
          type
        }
        ... on RevertFollowModuleSettings {
          type
        }
      }
    }
  }


  query GetProfile($request: SingleProfileQueryRequest!) {
    profile(request: $request) {
        id
        name
        bio
        attributes {
          displayType
          traitType
          key
          value
        }
        followNftAddress
        metadata
        isDefault
        picture {
          ... on NftImage {
            contractAddress
            tokenId
            uri
            verified
          }
          ... on MediaSet {
            original {
              url
              mimeType
            }
          }
          __typename
        }
        handle
        coverPicture {
          ... on NftImage {
            contractAddress
            tokenId
            uri
            verified
          }
          ... on MediaSet {
            original {
              url
              mimeType
            }
          }
          __typename
        }
        ownedBy
        dispatcher {
          address
          canUseRelay
        }
        stats {
          totalFollowers
          totalFollowing
          totalPosts
          totalComments
          totalMirrors
          totalPublications
          totalCollects
        }
        followModule {
          ... on FeeFollowModuleSettings {
            type
            amount {
              asset {
                symbol
                name
                decimals
                address
              }
              value
            }
            recipient
          }
          ... on ProfileFollowModuleSettings {
            type
          }
          ... on RevertFollowModuleSettings {
            type
          }
        }
    }
  }


  query GetProfiles($request: ProfileQueryRequest!) {
    profiles(request: $request) {
      items {
        id
        name
        bio
        attributes {
          displayType
          traitType
          key
          value
        }
        followNftAddress
        metadata
        isDefault
        picture {
          ... on NftImage {
            contractAddress
            tokenId
            uri
            verified
          }
          ... on MediaSet {
            original {
              url
              mimeType
            }
          }
          __typename
        }
        handle
        coverPicture {
          ... on NftImage {
            contractAddress
            tokenId
            uri
            verified
          }
          ... on MediaSet {
            original {
              url
              mimeType
            }
          }
          __typename
        }
        ownedBy
        dispatcher {
          address
          canUseRelay
        }
        stats {
          totalFollowers
          totalFollowing
          totalPosts
          totalComments
          totalMirrors
          totalPublications
          totalCollects
        }
        followModule {
          ... on FeeFollowModuleSettings {
            type
            amount {
              asset {
                symbol
                name
                decimals
                address
              }
              value
            }
            recipient
          }
          ... on ProfileFollowModuleSettings {
            type
          }
          ... on RevertFollowModuleSettings {
            type
          }
        }
      }
      pageInfo {
        prev
        next
        totalCount
      }
    }
  }


  query RecommendedProfiles {
    recommendedProfiles {
        id
        name
        bio
        attributes {
          displayType
          traitType
          key
          value
        }
        followNftAddress
        metadata
        isDefault
        picture {
          ... on NftImage {
            contractAddress
            tokenId
            uri
            verified
          }
          ... on MediaSet {
            original {
              url
              width
              height
              mimeType
            }
            small {
              url
              width
              height
              mimeType
            }
            medium {
              url
              width
              height
              mimeType
            }
          }
          __typename
        }
        handle
        coverPicture {
          ... on NftImage {
            contractAddress
            tokenId
            uri
            verified
          }
          ... on MediaSet {
            original {
              url
              width
              height
              mimeType
            }
            small {
              height
              width
              url
              mimeType
            }
            medium {
              url
              width
              height
              mimeType
            }
          }
          __typename
        }
        ownedBy
        dispatcher {
          address
          canUseRelay
        }
        stats {
          totalFollowers
          totalFollowing
          totalPosts
          totalComments
          totalMirrors
          totalPublications
          totalCollects
        }
        followModule {
          ... on FeeFollowModuleSettings {
            type
            amount {
              asset {
                symbol
                name
                decimals
                address
              }
              value
            }
            recipient
          }
          ... on ProfileFollowModuleSettings {
            type
          }
          ... on RevertFollowModuleSettings {
            type
          }
        }
  	}
  }


  mutation CreateSetDefaultProfileTypedData($request: CreateSetDefaultProfileRequest!) { 
    createSetDefaultProfileTypedData(request: $request) {
      id
      expiresAt
      typedData {
        types {
          SetDefaultProfileWithSig {
            name
            type
          }
        }
      domain {
        name
        chainId
        version
        verifyingContract
      }
      value {
        nonce
        deadline
        wallet
        profileId
      }
    }
  }
}


  query GetNftChallenge($request: NftOwnershipChallengeRequest!) {
    nftOwnershipChallenge(request: $request) { 
      id
      text 
    }
  }


  mutation CreateSetProfileImageUriTypedData($request: UpdateProfileImageRequest!) { 
    createSetProfileImageURITypedData(request: $request) {
      id
      expiresAt
      typedData {
        domain {
          name
          chainId
          version
          verifyingContract
        }
        types {
          SetProfileImageURIWithSig {
            name
            type
          }
        }
        value {
          nonce
        	deadline
        	imageURI
        	profileId
        }
      }
    }
 }


  mutation CreateSetProfileMetadataTypedData($request: CreatePublicSetProfileMetadataURIRequest!) { 
    createSetProfileMetadataTypedData(request: $request) {
      id
      expiresAt
      typedData {
        types {
          SetProfileMetadataURIWithSig {
            name
            type
          }
        }
        domain {
          name
          chainId
          version
          verifyingContract
        }
        value {
          nonce
          deadline
          profileId
          metadata
        }
      }
    }
  }


  query GetGlobalProtocolStats($request: GlobalProtocolStatsRequest) {
    globalProtocolStats(request: $request) {
        totalProfiles
        totalBurntProfiles
        totalPosts
        totalMirrors
        totalComments
        totalCollects
        totalFollows
        totalRevenue {
            asset {
                name
                symbol
                decimals
                address
            }
            value
        }
     }
  }


  mutation CreateCommentTypedData($request: CreatePublicCommentRequest!) { 
    createCommentTypedData(request: $request) {
      id
      expiresAt
      typedData {
        types {
          CommentWithSig {
            name
            type
          }
        }
      domain {
        name
        chainId
        version
        verifyingContract
      }
      value {
        nonce
        deadline
        profileId
        profileIdPointed
        pubIdPointed
        contentURI
        collectModule
        collectModuleInitData
        referenceModule
        referenceModuleInitData
        referenceModuleData
      }
     }
   }
 }


  query GetPublication($request: PublicationQueryRequest!) {
    publication(request: $request) {
        __typename 
        ... on Post {
          ...PostFields
        }
        ... on Comment {
          ...CommentFields
        }
        ... on Mirror {
          ...MirrorFields
      }
    }
  }

#  fragment MediaFields on Media {
#    url
#    mimeType
#  }

#  fragment ProfileFields on Profile {
#    id
#    name
#    bio
#    attributes {
#      displayType
#      traitType
#      key
#      value
#    }
#    isFollowedByMe
#    isFollowing(who: null)
#    followNftAddress
#    metadata
#    isDefault
#    handle
#    picture {
#      ... on NftImage {
#        contractAddress
#        tokenId
#        uri
#        verified
#      }
#      ... on MediaSet {
#        original {
#          ...MediaFields
#        }
#      }
#    }
#    coverPicture {
#      ... on NftImage {
#        contractAddress
#        tokenId
#        uri
#        verified
#      }
#      ... on MediaSet {
#        original {
#          ...MediaFields
#        }
#      }
#    }
#    ownedBy
#    dispatcher {
#      address
#    }
#    stats {
#      totalFollowers
#      totalFollowing
#      totalPosts
#      totalComments
#      totalMirrors
#      totalPublications
#      totalCollects
#    }
#    followModule {
#      ... on FeeFollowModuleSettings {
#        type
#        amount {
#          asset {
#            name
#            symbol
#            decimals
#            address
#          }
#          value
#        }
#        recipient
#      }
#      ... on ProfileFollowModuleSettings {
#        type
#      }
#      ... on RevertFollowModuleSettings {
#        type
#      }
#    }
#  }

  fragment PublicationStatsFields on PublicationStats { 
    totalAmountOfMirrors
    totalAmountOfCollects
    totalAmountOfComments
  }

#  fragment MetadataOutputFields on MetadataOutput {
#    name
#    description
#    content
#    media {
#      original {
#        ...MediaFields
#      }
#    }
#    attributes {
#      displayType
#      traitType
#      value
#    }
#  }

  fragment Erc20Fields on Erc20 {
    name
    symbol
    decimals
    address
  }

  fragment CollectModuleFields on CollectModule {
    __typename
    ... on FreeCollectModuleSettings {
      type
      followerOnly
      contractAddress
    }
    ... on FeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedTimedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
    ... on RevertCollectModuleSettings {
      type
    }
    ... on TimedFeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
  }

#  fragment PostFields on Post {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    mirrors(by: null)
#    hasCollectedByMe
#  }

#  fragment MirrorBaseFields on Mirror {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    hasCollectedByMe
#  }

  fragment MirrorFields on Mirror {
    ...MirrorBaseFields
    mirrorOf {
     ... on Post {
        ...PostFields          
     }
     ... on Comment {
        ...CommentFields          
     }
    }
  }

#  fragment CommentBaseFields on Comment {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    mirrors(by: null)
#    hasCollectedByMe
#  }

  fragment CommentFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
        ...MirrorBaseFields
        mirrorOf {
          ... on Post {
             ...PostFields          
          }
          ... on Comment {
             ...CommentMirrorOfFields        
          }
        }
      }
    }
  }

  fragment CommentMirrorOfFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
         ...MirrorBaseFields
      }
    }
  }


  query GetPublications($request: PublicationsQueryRequest!) {
    publications(request: $request) {
      items {
        __typename 
        ... on Post {
          ...PostFields
        }
        ... on Comment {
          ...CommentFields
        }
        ... on Mirror {
          ...MirrorFields
        }
      }
      pageInfo {
        prev
        next
        totalCount
      }
    }
  }

#  fragment MediaFields on Media {
#    url
#    mimeType
#  }

#  fragment ProfileFields on Profile {
#    id
#    name
#    bio
#    attributes {
#      displayType
#      traitType
#      key
#      value
#    }
#    isFollowedByMe
#    isFollowing(who: null)
#    followNftAddress
#    metadata
#    isDefault
#    handle
#    picture {
#      ... on NftImage {
#        contractAddress
#        tokenId
#        uri
#        verified
#      }
#      ... on MediaSet {
#        original {
#          ...MediaFields
#        }
#      }
#    }
#    coverPicture {
#      ... on NftImage {
#        contractAddress
#        tokenId
#        uri
#        verified
#      }
#      ... on MediaSet {
#        original {
#          ...MediaFields
#        }
#      }
#    }
#    ownedBy
#    dispatcher {
#      address
#    }
#    stats {
#      totalFollowers
#      totalFollowing
#      totalPosts
#      totalComments
#      totalMirrors
#      totalPublications
#      totalCollects
#    }
#    followModule {
#      ... on FeeFollowModuleSettings {
#        type
#        amount {
#          asset {
#            name
#            symbol
#            decimals
#            address
#          }
#          value
#        }
#        recipient
#      }
#      ... on ProfileFollowModuleSettings {
#        type
#      }
#      ... on RevertFollowModuleSettings {
#        type
#      }
#    }
#  }

  fragment PublicationStatsFields on PublicationStats { 
    totalAmountOfMirrors
    totalAmountOfCollects
    totalAmountOfComments
  }

#  fragment MetadataOutputFields on MetadataOutput {
#    name
#    description
#    content
#    media {
#      original {
#        ...MediaFields
#      }
#    }
#    attributes {
#      displayType
#      traitType
#      value
#    }
#  }

  fragment Erc20Fields on Erc20 {
    name
    symbol
    decimals
    address
  }

  fragment CollectModuleFields on CollectModule {
    __typename
    ... on FreeCollectModuleSettings {
      type
      followerOnly
      contractAddress
    }
    ... on FeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedTimedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
    ... on RevertCollectModuleSettings {
      type
    }
    ... on TimedFeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
  }

#  fragment PostFields on Post {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    mirrors(by: null)
#    hasCollectedByMe
#  }

#  fragment MirrorBaseFields on Mirror {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    hasCollectedByMe
#  }

  fragment MirrorFields on Mirror {
    ...MirrorBaseFields
    mirrorOf {
     ... on Post {
        ...PostFields          
     }
     ... on Comment {
        ...CommentFields          
     }
    }
  }

#  fragment CommentBaseFields on Comment {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    mirrors(by: null)
#    hasCollectedByMe
#  }

  fragment CommentFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
        ...MirrorBaseFields
        mirrorOf {
          ... on Post {
             ...PostFields          
          }
          ... on Comment {
             ...CommentMirrorOfFields        
          }
        }
      }
    }
  }

  fragment CommentMirrorOfFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
         ...MirrorBaseFields
      }
    }
  }


  mutation HidePublication($request: HidePublicationRequest!) { 
   hidePublication(request: $request)
 }


  mutation CreateMirrorTypedData($request: CreateMirrorRequest!) { 
    createMirrorTypedData(request: $request) {
      id
      expiresAt
      typedData {
        types {
          MirrorWithSig {
            name
            type
          }
        }
      domain {
        name
        chainId
        version
        verifyingContract
      }
      value {
        nonce
        deadline
        profileId
        profileIdPointed
        pubIdPointed
        referenceModuleData
        referenceModule
        referenceModuleInitData
      }
     }
   }
 }


  mutation CreatePostTypedData($request: CreatePublicPostRequest!) { 
    createPostTypedData(request: $request) {
      id
      expiresAt
      typedData {
        types {
          PostWithSig {
            name
            type
          }
        }
      domain {
        name
        chainId
        version
        verifyingContract
      }
      value {
        nonce
        deadline
        profileId
        contentURI
        collectModule
        collectModuleInitData
        referenceModule
        referenceModuleInitData
      }
    }
  }
}


  query WhoCollected($request: WhoCollectedPublicationRequest!) {
    whoCollectedPublication(request: $request) {
       items {
        address
        defaultProfile {
          id
          name
          bio
          isDefault
          attributes {
            displayType
            traitType
            key
            value
          }
          followNftAddress
          metadata
          handle
          picture {
            ... on NftImage {
              contractAddress
              tokenId
              uri
              chainId
              verified
            }
            ... on MediaSet {
              original {
                url
                mimeType
              }
            }
          }
          coverPicture {
            ... on NftImage {
              contractAddress
              tokenId
              uri
              chainId
              verified
            }
            ... on MediaSet {
              original {
                url
                mimeType
              }
            }
          }
          ownedBy
          dispatcher {
            address
            canUseRelay
          }
          stats {
            totalFollowers
            totalFollowing
            totalPosts
            totalComments
            totalMirrors
            totalPublications
            totalCollects
          }
          followModule {
            ... on FeeFollowModuleSettings {
              type
              contractAddress
              amount {
                asset {
                  name
                  symbol
                  decimals
                  address
                }
                value
              }
              recipient
            }
            ... on ProfileFollowModuleSettings {
              type
            }
            ... on RevertFollowModuleSettings {
              type
            }
          }
        }
      }
      pageInfo {
        prev
        next
        totalCount
      }
    }
  }


  mutation AddReaction($request: ReactionRequest!) { 
   addReaction(request: $request)
 }


  mutation RemoveReaction($request: ReactionRequest!) { 
   removeReaction(request: $request)
 }


  mutation ReportPublication($request: ReportPublicationRequest!) { 
   reportPublication(request: $request)
 }


  query GetProfileRevenue($request: ProfileRevenueQueryRequest!) {
    profileRevenue(request: $request) {
      items {
        publication {
          __typename 
          ... on Post {
            ...PostFields
          }
          ... on Comment {
            ...CommentFields
          }
          ... on Mirror {
            ...MirrorFields
          }
      	}
        earnings {
          asset {
            name
            symbol
            decimals
            address
          }
          value
        }
      }
      pageInfo {
        prev
        next
        totalCount
      }
    }
  }

#  fragment MediaFields on Media {
#    url
#    width
#    height
#    mimeType
#  }

#  fragment ProfileFields on Profile {
#    id
#    name
#    bio
#    attributes {
#      displayType
#      traitType
#      key
#      value
#    }
#    isFollowedByMe
#    isFollowing(who: null)
#    followNftAddress
#    metadata
#    isDefault
#    handle
#    picture {
#      ... on NftImage {
#        contractAddress
#        tokenId
#        uri
#        verified
#      }
#      ... on MediaSet {
#        original {
#          ...MediaFields
#        }
#        small {
#          ...MediaFields
#        }
#        medium {
#          ...MediaFields
#        }
#      }
#    }
#    coverPicture {
#      ... on NftImage {
#        contractAddress
#        tokenId
#        uri
#        verified
#      }
#      ... on MediaSet {
#        original {
#          ...MediaFields
#        }
#        small {
#         ...MediaFields
#        }
#        medium {
#          ...MediaFields
#        }
#      }
#    }
#    ownedBy
#    dispatcher {
#      address
#    }
#    stats {
#      totalFollowers
#      totalFollowing
#      totalPosts
#      totalComments
#      totalMirrors
#      totalPublications
#      totalCollects
#    }
#    followModule {
#      ... on FeeFollowModuleSettings {
#        type
#        amount {
#          asset {
#            name
#            symbol
#            decimals
#            address
#          }
#          value
#        }
#        recipient
#      }
#      ... on ProfileFollowModuleSettings {
#        type
#      }
#      ... on RevertFollowModuleSettings {
#        type
#      }
#    }
#  }

  fragment PublicationStatsFields on PublicationStats { 
    totalAmountOfMirrors
    totalAmountOfCollects
    totalAmountOfComments
  }

#  fragment MetadataOutputFields on MetadataOutput {
#    name
#    description
#    content
#    media {
#      original {
#        ...MediaFields
#      }
#      small {
#        ...MediaFields
#      }
#      medium {
#        ...MediaFields
#      }
#    }
#    attributes {
#      displayType
#      traitType
#      value
#    }
#  }

  fragment Erc20Fields on Erc20 {
    name
    symbol
    decimals
    address
  }

  fragment CollectModuleFields on CollectModule {
    __typename
    ... on FreeCollectModuleSettings {
      type
      followerOnly
      contractAddress
    }
    ... on FeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedTimedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
    ... on RevertCollectModuleSettings {
      type
    }
    ... on TimedFeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
  }

#  fragment PostFields on Post {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    mirrors(by: null)
#    hasCollectedByMe
#  }

#  fragment MirrorBaseFields on Mirror {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    hasCollectedByMe
#  }

  fragment MirrorFields on Mirror {
    ...MirrorBaseFields
    mirrorOf {
     ... on Post {
        ...PostFields          
     }
     ... on Comment {
        ...CommentFields          
     }
    }
  }

#  fragment CommentBaseFields on Comment {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    mirrors(by: null)
#    hasCollectedByMe
#  }

  fragment CommentFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
        ...MirrorBaseFields
        mirrorOf {
          ... on Post {
             ...PostFields          
          }
          ... on Comment {
             ...CommentMirrorOfFields        
          }
        }
      }
    }
  }

  fragment CommentMirrorOfFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
         ...MirrorBaseFields
      }
    }
  }


  query GetPublicationRevenue($request: PublicationRevenueQueryRequest!) {
    publicationRevenue(request: $request) {
      publication {
        __typename 
        ... on Post {
            ...PostFields
        }
        ... on Comment {
            ...CommentFields
        }
        ... on Mirror {
            ...MirrorFields
        }
      }
      earnings {
        asset {
          name
          symbol
          decimals
          address
        }
        value
      }
    }
  }

#  fragment MediaFields on Media {
#    url
#    width
#    height
#    mimeType
#  }

#  fragment ProfileFields on Profile {
#    id
#    name
#    bio
#    attributes {
#      displayType
#      traitType
#      key
#      value
#    }
#    isFollowedByMe
#    isFollowing(who: null)
#    followNftAddress
#    metadata
#    isDefault
#    handle
#    picture {
#      ... on NftImage {
#        contractAddress
#        tokenId
#        uri
#        verified
#      }
#      ... on MediaSet {
#        original {
#          ...MediaFields
#        }
#        small {
#          ...MediaFields
#        }
#        medium {
#          ...MediaFields
#        }
#      }
#    }
#    coverPicture {
#      ... on NftImage {
#        contractAddress
#        tokenId
#        uri
#        verified
#      }
#      ... on MediaSet {
#        original {
#          ...MediaFields
#        }
#        small {
#         ...MediaFields
#        }
#        medium {
#          ...MediaFields
#        }
#      }
#    }
#    ownedBy
#    dispatcher {
#      address
#    }
#    stats {
#      totalFollowers
#      totalFollowing
#      totalPosts
#      totalComments
#      totalMirrors
#      totalPublications
#      totalCollects
#    }
#    followModule {
#      ... on FeeFollowModuleSettings {
#        type
#        amount {
#          asset {
#            name
#            symbol
#            decimals
#            address
#          }
#          value
#        }
#        recipient
#      }
#      ... on ProfileFollowModuleSettings {
#        type
#      }
#      ... on RevertFollowModuleSettings {
#        type
#      }
#    }
#  }

  fragment PublicationStatsFields on PublicationStats { 
    totalAmountOfMirrors
    totalAmountOfCollects
    totalAmountOfComments
  }

#  fragment MetadataOutputFields on MetadataOutput {
#    name
#    description
#    content
#    media {
#      original {
#        ...MediaFields
#      }
#      small {
#        ...MediaFields
#      }
#      medium {
#        ...MediaFields
#      }
#    }
#    attributes {
#      displayType
#      traitType
#      value
#    }
#  }

  fragment Erc20Fields on Erc20 {
    name
    symbol
    decimals
    address
  }

  fragment CollectModuleFields on CollectModule {
    __typename
    ... on FreeCollectModuleSettings {
      type
      followerOnly
      contractAddress
    }
    ... on FeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedTimedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
    ... on RevertCollectModuleSettings {
      type
    }
    ... on TimedFeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
  }

#  fragment PostFields on Post {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    mirrors(by: null)
#    hasCollectedByMe
#  }

#  fragment MirrorBaseFields on Mirror {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    hasCollectedByMe
#  }

  fragment MirrorFields on Mirror {
    ...MirrorBaseFields
    mirrorOf {
     ... on Post {
        ...PostFields          
     }
     ... on Comment {
        ...CommentFields          
     }
    }
  }

#  fragment CommentBaseFields on Comment {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    mirrors(by: null)
#    hasCollectedByMe
#  }

  fragment CommentFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
        ...MirrorBaseFields
        mirrorOf {
          ... on Post {
             ...PostFields          
          }
          ... on Comment {
             ...CommentMirrorOfFields        
          }
        }
      }
    }
  }

  fragment CommentMirrorOfFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
         ...MirrorBaseFields
      }
    }
  }


  query Search($request: SearchQueryRequest!) {
    search(request: $request) {
			... on PublicationSearchResult {
       __typename 
      items {
        __typename 
        ... on Comment {
          ...CommentFields
        }
        ... on Post {
          ...PostFields
        }
      }
      pageInfo {
        prev
        totalCount
        next
      }
    }
    ... on ProfileSearchResult {
      __typename 
      items {
        ... on Profile {
          ...ProfileFields
        }
      }
      pageInfo {
        prev
        totalCount
        next
      }
     }
    }
  }

#fragment MediaFields on Media {
#  url
#  mimeType
#}

#fragment MirrorBaseFields on Mirror {
#  id
#  profile {
#    ...ProfileFields
#  }
#  stats {
#    ...PublicationStatsFields
#  }
#  metadata {
#    ...MetadataOutputFields
#  }
#  createdAt
#  collectModule {
#    ...CollectModuleFields
#  }
#  referenceModule {
#    ... on FollowOnlyReferenceModuleSettings {
#      type
#    }
#  }
#  appId
#}

#fragment ProfileFields on Profile {
#  profileId: id,
#  name
#  bio
#  attributes {
#    displayType
#    traitType
#    key
#    value
#  }
#  isFollowedByMe
#  isFollowing(who: null)
#  followNftAddress
#  metadataUrl: metadata
#  isDefault
#  handle
#  picture {
#    ... on NftImage {
#      contractAddress
#      tokenId
#      uri
#      verified
#    }
#    ... on MediaSet {
#      original {
#        ...MediaFields
#      }
#    }
#  }
#  coverPicture {
#    ... on NftImage {
#      contractAddress
#      tokenId
#      uri
#      verified
#    }
#    ... on MediaSet {
#      original {
#        ...MediaFields
#      }
#    }
#  }
#  ownedBy
#  dispatcher {
#    address
#  }
#  stats {
#    totalFollowers
#    totalFollowing
#    totalPosts
#    totalComments
#    totalMirrors
#    totalPublications
#    totalCollects
#  }
#  followModule {
#    ... on FeeFollowModuleSettings {
#      type
#      amount {
#        asset {
#          name
#          symbol
#          decimals
#          address
#        }
#        value
#      }
#      recipient
#    }
#    ... on ProfileFollowModuleSettings {
#      type
#    }
#    ... on RevertFollowModuleSettings {
#      type
#    }
#  }
#}

fragment PublicationStatsFields on PublicationStats { 
  totalAmountOfMirrors
  totalAmountOfCollects
  totalAmountOfComments
}

#fragment MetadataOutputFields on MetadataOutput {
#  name
#  description
#  content
#  media {
#    original {
#      ...MediaFields
#    }
#  }
#  attributes {
#    displayType
#    traitType
#    value
#  }
#}

fragment Erc20Fields on Erc20 {
  name
  symbol
  decimals
  address
}

fragment CollectModuleFields on CollectModule {
  __typename
  ... on FreeCollectModuleSettings {
    type
    followerOnly
    contractAddress
  }
  ... on FeeCollectModuleSettings {
    type
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
  }
  ... on LimitedFeeCollectModuleSettings {
    type
    collectLimit
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
  }
  ... on LimitedTimedFeeCollectModuleSettings {
    type
    collectLimit
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
    endTimestamp
  }
  ... on RevertCollectModuleSettings {
    type
  }
  ... on TimedFeeCollectModuleSettings {
    type
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
    endTimestamp
  }
}

#fragment PostFields on Post {
#  id
#  profile {
#    ...ProfileFields
#  }
#  stats {
#    ...PublicationStatsFields
#  }
#  metadata {
#    ...MetadataOutputFields
#  }
#  createdAt
#  collectModule {
#    ...CollectModuleFields
#  }
#  referenceModule {
#    ... on FollowOnlyReferenceModuleSettings {
#      type
#    }
#  }
#  appId
#  hidden
#  reaction(request: null)
#  mirrors(by: null)
#  hasCollectedByMe
#}

#fragment CommentBaseFields on Comment {
#  id
#  profile {
#    ...ProfileFields
#  }
#  stats {
#    ...PublicationStatsFields
#  }
#  metadata {
#    ...MetadataOutputFields
#  }
#  createdAt
#  collectModule {
#    ...CollectModuleFields
#  }
#  referenceModule {
#    ... on FollowOnlyReferenceModuleSettings {
#      type
#    }
#  }
#  appId
#  hidden
#  reaction(request: null)
#  mirrors(by: null)
#  hasCollectedByMe
#}

fragment CommentFields on Comment {
  ...CommentBaseFields
  mainPost {
    ... on Post {
      ...PostFields
    }
    ... on Mirror {
      ...MirrorBaseFields
      mirrorOf {
        ... on Post {
           ...PostFields          
        }
        ... on Comment {
           ...CommentMirrorOfFields        
        }
      }
    }
  }
}

fragment CommentMirrorOfFields on Comment {
  ...CommentBaseFields
  mainPost {
    ... on Post {
      ...PostFields
    }
    ... on Mirror {
       ...MirrorBaseFields
    }
  }
}


  query GetTimeline($request: TimelineRequest!) {
    timeline(request: $request) {
      items {
        __typename 
        ... on Post {
          ...PostFields
        }
        ... on Comment {
          ...CommentFields
        }
        ... on Mirror {
          ...MirrorFields
        }
      }
      pageInfo {
        prev
        next
        totalCount
      }
    }
  }

#  fragment MediaFields on Media {
#    url
#    width
#    height
#    mimeType
#  }

#  fragment ProfileFields on Profile {
#    id
#    name
#    bio
#    attributes {
#      displayType
#      traitType
#      key
#      value
#    }
#    isFollowedByMe
#    isFollowing(who: null)
#    followNftAddress
#    metadata
#    isDefault
#    handle
#    picture {
#      ... on NftImage {
#        contractAddress
#        tokenId
#        uri
#        verified
#      }
#      ... on MediaSet {
#        original {
#          ...MediaFields
#        }
#        small {
#          ...MediaFields
#        }
#        medium {
#          ...MediaFields
#        }
#      }
#    }
#    coverPicture {
#      ... on NftImage {
#        contractAddress
#        tokenId
#        uri
#        verified
#      }
#      ... on MediaSet {
#        original {
#          ...MediaFields
#        }
#        small {
#         ...MediaFields
#        }
#        medium {
#          ...MediaFields
#        }
#      }
#    }
#    ownedBy
#    dispatcher {
#      address
#    }
#    stats {
#      totalFollowers
#      totalFollowing
#      totalPosts
#      totalComments
#      totalMirrors
#      totalPublications
#      totalCollects
#    }
#    followModule {
#      ... on FeeFollowModuleSettings {
#        type
#        amount {
#          asset {
#            name
#            symbol
#            decimals
#            address
#          }
#          value
#        }
#        recipient
#      }
#      ... on ProfileFollowModuleSettings {
#        type
#      }
#      ... on RevertFollowModuleSettings {
#        type
#      }
#    }
#  }

  fragment PublicationStatsFields on PublicationStats { 
    totalAmountOfMirrors
    totalAmountOfCollects
    totalAmountOfComments
  }

#  fragment MetadataOutputFields on MetadataOutput {
#    name
#    description
#    content
#    media {
#      original {
#        ...MediaFields
#      }
#      small {
#        ...MediaFields
#      }
#      medium {
#        ...MediaFields
#      }
#    }
#    attributes {
#      displayType
#      traitType
#      value
#    }
#  }

  fragment Erc20Fields on Erc20 {
    name
    symbol
    decimals
    address
  }

  fragment CollectModuleFields on CollectModule {
    __typename
    ... on FreeCollectModuleSettings {
      type
      followerOnly
      contractAddress
    }
    ... on FeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
    }
    ... on LimitedTimedFeeCollectModuleSettings {
      type
      collectLimit
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
    ... on RevertCollectModuleSettings {
      type
    }
    ... on TimedFeeCollectModuleSettings {
      type
      amount {
        asset {
          ...Erc20Fields
        }
        value
      }
      recipient
      referralFee
      endTimestamp
    }
  }

#  fragment PostFields on Post {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    collectedBy {
#      ...WalletFields
#    }
#    hidden
#    reaction(request: null)
#    mirrors(by: null)
#    hasCollectedByMe
#  }

#  fragment MirrorBaseFields on Mirror {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    hidden
#    reaction(request: null)
#    hasCollectedByMe
#  }

  fragment MirrorFields on Mirror {
    ...MirrorBaseFields
    mirrorOf {
     ... on Post {
        ...PostFields          
     }
     ... on Comment {
        ...CommentFields          
     }
    }
  }

#  fragment CommentBaseFields on Comment {
#    id
#    profile {
#      ...ProfileFields
#    }
#    stats {
#      ...PublicationStatsFields
#    }
#    metadata {
#      ...MetadataOutputFields
#    }
#    createdAt
#    collectModule {
#      ...CollectModuleFields
#    }
#    referenceModule {
#      ... on FollowOnlyReferenceModuleSettings {
#        type
#      }
#    }
#    appId
#    collectedBy {
#      ...WalletFields
#    }
#    hidden
#    reaction(request: null)
#    mirrors(by: null)
#    hasCollectedByMe
#  }

  fragment CommentFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
        ...MirrorBaseFields
        mirrorOf {
          ... on Post {
             ...PostFields          
          }
          ... on Comment {
             ...CommentMirrorOfFields        
          }
        }
      }
    }
  }

  fragment CommentMirrorOfFields on Comment {
    ...CommentBaseFields
    mainPost {
      ... on Post {
        ...PostFields
      }
      ... on Mirror {
         ...MirrorBaseFields
      }
    }
  }

	fragment WalletFields on Wallet {
   address,
   defaultProfile {
    ...ProfileFields
   }
	}

